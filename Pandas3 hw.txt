Pandas3

Problem 1 :Calculate Special Bonus 

sol 1:

import pandas as pd

def calculate_special_bonus(employees: pd.DataFrame) -> pd.DataFrame:

    employees['bonus'] = employees.apply(lambda x: x['salary'] 
    if (x['employee_id'] %2 == 1 )and not x['name'].startswith('M') else 0, axis =1)
    return employees[['employee_id','bonus']].sort_values(by='employee_id')


sol 2:

import pandas as pd

def calculate_special_bonus(employees: pd.DataFrame) -> pd.DataFrame:

    employees['bonus'] =0
    employees.loc[(employees['employee_id'] % 2 == 1) & (~employees['name'].str.startswith('M')), 'bonus']=employees['salary']
    return employees[['employee_id', 'bonus']].sort_values(by='employee_id')


sol 3:

import pandas as pd

def calculate_special_bonus(employees: pd.DataFrame) -> pd.DataFrame:

   employees['bonus'] = employees[(employees['employee_id'] % 2 == 1) & (~employees['name'].str.startswith('M'))]['salary']
   employees['bonus'] = employees.bonus.fillna(value=0)
   return employees[['employee_id', 'bonus']].sort_values(by='employee_id')





Problem 2 : Fix Names in a Table 


sol 1:

import pandas as pd

def fix_names(users: pd.DataFrame) -> pd.DataFrame:

    users['name']= users['name'].str.capitalize()
    return users[['user_id','name']].sort_values(by ='user_id')


sol 2:

import pandas as pd

def fix_names(users: pd.DataFrame) -> pd.DataFrame:


    users['name'] = users['name'].str[0].str.upper() + users['name'].str[1:].str.lower()
    return users.sort_values(by ='user_id')




Problem 3 : Patients with a Condition 



sol 1:

import pandas as pd

def find_patients(patients: pd.DataFrame) -> pd.DataFrame:
    result=[]
    for i in range(len(patients)):
        p_id = patients['patient_id'][i]
        p_name = patients['patient_name'][i]
        conditions = patients['conditions'][i]
        for condition in conditions.split():
            if condition.startswith('DIAB1'):
                result.append([p_id,p_name, conditions])
                break
    return pd.DataFrame(result,columns=['patient_id','patient_name','conditions'])


sol 2:

import pandas as pd

def find_patients(patients: pd.DataFrame) -> pd.DataFrame:


    df = patients[(patients['conditions'].str.startswith('DIAB1')) | (patients['conditions'].str.contains(' DIAB1'))]
    return df


sol 3:

import pandas as pd

def find_patients(patients: pd.DataFrame) -> pd.DataFrame:

    df =patients[patients['conditions'].str.contains(r'\bDIAB1')]
    return df[['patient_id','patient_name','conditions']]

    

sol 4:

import pandas as pd

def find_patients(patients: pd.DataFrame) -> pd.DataFrame:

    df =patients[patients['conditions'].str.contains(r'(^DIAB1)|( DIAB1)')]
    return df


sol 5:

import pandas as pd

def find_patients(patients: pd.DataFrame) -> pd.DataFrame:
    
    return patients[
        patients['conditions'].str.contains(r'(^DIAB1)|( DIAB1)')
    ]